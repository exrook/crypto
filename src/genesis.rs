use types::{Balance, Hash, PubKey, Signature, Work};
use transaction::OpenTransaction;

pub const BALANCE: Balance = Balance(u128::max_value());
// These are intentionally the same, apparently
const LIVE_KEY: PubKey = PubKey([
    0xE8, 0x92, 0x08, 0xDD, 0x03, 0x8F, 0xBB, 0x26, 0x99, 0x87, 0x68, 0x96, 0x21, 0xD5, 0x22, 0x92,
    0xAE, 0x9C, 0x35, 0x94, 0x1A, 0x74, 0x84, 0x75, 0x6E, 0xCC, 0xED, 0x92, 0xA6, 0x50, 0x93, 0xBA,
]);
const LIVE_SOURCE: Hash = [
    0xE8, 0x92, 0x08, 0xDD, 0x03, 0x8F, 0xBB, 0x26, 0x99, 0x87, 0x68, 0x96, 0x21, 0xD5, 0x22, 0x92,
    0xAE, 0x9C, 0x35, 0x94, 0x1A, 0x74, 0x84, 0x75, 0x6E, 0xCC, 0xED, 0x92, 0xA6, 0x50, 0x93, 0xBA,
];
const LIVE_WORK: Work = Work(0x62f05417dd3fb691);
const LIVE_SIGNATURE: Signature = Signature([
    0x9F, 0x0C, 0x93, 0x3C, 0x8A, 0xDE, 0x00, 0x4D, 0x80, 0x8E, 0xA1, 0x98, 0x5F, 0xA7, 0x46, 0xA7,
    0xE9, 0x5B, 0xA2, 0xA3, 0x8F, 0x86, 0x76, 0x40, 0xF5, 0x3E, 0xC8, 0xF1, 0x80, 0xBD, 0xFE, 0x9E,
    0x2C, 0x12, 0x68, 0xDE, 0xAD, 0x7C, 0x26, 0x64, 0xF3, 0x56, 0xE3, 0x7A, 0xBA, 0x36, 0x2B, 0xC5,
    0x8E, 0x46, 0xDB, 0xA0, 0x3E, 0x52, 0x3A, 0x7B, 0x5A, 0x19, 0xE4, 0xB6, 0xEB, 0x12, 0xBB, 0x02,
]);
pub const LIVE_BLOCK: OpenTransaction = OpenTransaction {
    account: LIVE_KEY,
    source: LIVE_SOURCE,
    representative: LIVE_KEY,
    work: LIVE_WORK,
    signature: LIVE_SIGNATURE,
};
#[test]
fn test_live_sig() {
    LIVE_BLOCK.verify_sig().unwrap()
}
#[test]
fn test_live_work() {
    use transaction::RaiWork;
    let work: u64 = LIVE_BLOCK.work_validate().into();
    println!("{:X}", work);
    LIVE_BLOCK.verify_work().unwrap();
}

pub(crate) const TEST_PRIVATE_KEY: [u8; 32] = [
    0x34, 0xF0, 0xA3, 0x7A, 0xAD, 0x20, 0xF4, 0xA2, 0x60, 0xF0, 0xA5, 0xB3, 0xCB, 0x3D, 0x7F, 0xB5,
    0x06, 0x73, 0x21, 0x22, 0x63, 0xE5, 0x8A, 0x38, 0x0B, 0xC1, 0x04, 0x74, 0xBB, 0x03, 0x9C, 0xE4,
];
const TEST_KEY: PubKey = PubKey([
    0xB0, 0x31, 0x1E, 0xA5, 0x57, 0x08, 0xD6, 0xA5, 0x3C, 0x75, 0xCD, 0xBF, 0x88, 0x30, 0x02, 0x59,
    0xC6, 0xD0, 0x18, 0x52, 0x2F, 0xE3, 0xD4, 0xD0, 0xA2, 0x42, 0xE4, 0x31, 0xF9, 0xE8, 0xB6, 0xD0,
]);
const TEST_SOURCE: Hash = [
    0xB0, 0x31, 0x1E, 0xA5, 0x57, 0x08, 0xD6, 0xA5, 0x3C, 0x75, 0xCD, 0xBF, 0x88, 0x30, 0x02, 0x59,
    0xC6, 0xD0, 0x18, 0x52, 0x2F, 0xE3, 0xD4, 0xD0, 0xA2, 0x42, 0xE4, 0x31, 0xF9, 0xE8, 0xB6, 0xD0,
];
const TEST_WORK: Work = Work(0x9680625b39d3363d);
const TEST_SIGNATURE: Signature = Signature([
    0xEC, 0xDA, 0x91, 0x43, 0x73, 0xA2, 0xF0, 0xCA, 0x12, 0x96, 0x47, 0x5B, 0xAE, 0xE4, 0x05, 0x00,
    0xA7, 0xF0, 0xA7, 0xAD, 0x72, 0xA5, 0xA8, 0x0C, 0x81, 0xD7, 0xFA, 0xB7, 0xF6, 0xC8, 0x02, 0xB2,
    0xCC, 0x7D, 0xB5, 0x0F, 0x5D, 0xD0, 0xFB, 0x25, 0xB2, 0xEF, 0x11, 0x76, 0x1F, 0xA7, 0x34, 0x4A,
    0x15, 0x8D, 0xD5, 0xA7, 0x00, 0xB2, 0x1B, 0xD4, 0x7D, 0xE5, 0xBD, 0x0F, 0x63, 0x15, 0x3A, 0x02,
]);
pub const TEST_BLOCK: OpenTransaction = OpenTransaction {
    account: TEST_KEY,
    source: TEST_SOURCE,
    representative: TEST_KEY,
    work: TEST_WORK,
    signature: TEST_SIGNATURE,
};
#[test]
fn test_test_key() {
    use ed25519_dalek::*;
    use blake2::Blake2b;
    let priv_key = SecretKey::from_bytes(&TEST_PRIVATE_KEY).unwrap();
    let derive_pub = PublicKey::from_secret::<Blake2b>(&priv_key);
    assert_eq!(derive_pub.as_bytes(), &TEST_KEY.as_ref());
}
#[test]
fn test_test_sig() {
    TEST_BLOCK.verify_sig().unwrap()
}
#[test]
fn test_test_work() {
    use transaction::RaiWork;
    let work: u64 = TEST_BLOCK.work_validate().into();
    println!("{:X}", work);
    TEST_BLOCK.verify_work().unwrap();
}
